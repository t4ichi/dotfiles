/Users/taichi/.config/nvim
├── init.lua
├── lazy-lock.json
├── lua
│   ├── config
│   │   ├── autocmds.lua
│   │   ├── keymaps.lua
│   │   ├── lazy.lua
│   │   └── options.lua
│   └── plugins
│       ├── buffer.lua
│       ├── colorscheme.lua
│       ├── copilot.lua
│       ├── dashboard.lua
│       ├── git.lua
│       ├── lsp.lua
│       ├── lualine.lua
│       ├── mini.lua
│       ├── telescope.lua
│       ├── toggleterm.lua
│       ├── treesitter.lua
│       └── utils.lua
└── out.txt

4 directories, 19 files


--- File: /Users/taichi/.config/nvim/init.lua ---

require("config.autocmds")
require("config.keymaps")
require("config.options")
require("config.lazy")


--- File: /Users/taichi/.config/nvim/out.txt ---

/Users/taichi/.config/nvim
├── init.lua
├── lazy-lock.json
├── lua
│   ├── config
│   │   ├── autocmds.lua
│   │   ├── keymaps.lua
│   │   ├── lazy.lua
│   │   └── options.lua
│   └── plugins
│       ├── buffer.lua
│       ├── colorscheme.lua
│       ├── copilot.lua
│       ├── dashboard.lua
│       ├── git.lua
│       ├── lsp.lua
│       ├── lualine.lua
│       ├── mini.lua
│       ├── telescope.lua
│       ├── toggleterm.lua
│       ├── treesitter.lua
│       └── utils.lua
└── out.txt

4 directories, 19 files


--- File: /Users/taichi/.config/nvim/init.lua ---

require("config.autocmds")
require("config.keymaps")
require("config.options")
require("config.lazy")


--- File: /Users/taichi/.config/nvim/out.txt ---


... (file truncated, showing first 50 lines)


--- File: /Users/taichi/.config/nvim/.DS_Store ---
Non-text file, content not displayed


--- File: /Users/taichi/.config/nvim/lua/.DS_Store ---
Non-text file, content not displayed


--- File: /Users/taichi/.config/nvim/lua/config/autocmds.lua ---
Non-text file, content not displayed


--- File: /Users/taichi/.config/nvim/lua/config/keymaps.lua ---

vim.g.mapleader = " "

vim.api.nvim_set_keymap("i", "jk", "<Esc>", { noremap = true, silent = true })

-- cursor
vim.api.nvim_set_keymap("", "k", "gk", { noremap = true, silent = true })
vim.api.nvim_set_keymap("", "j", "gj", { noremap = true, silent = true })
vim.api.nvim_set_keymap("", "K", "10k", { noremap = true, silent = true })
vim.api.nvim_set_keymap("", "J", "10j", { noremap = true, silent = true })
vim.api.nvim_set_keymap("", "H", "b", { noremap = true, silent = true })
vim.api.nvim_set_keymap("", "L", "w", { noremap = true, silent = true })

vim.api.nvim_set_keymap("", "<C-h>", "0", { noremap = true, silent = true })
vim.api.nvim_set_keymap("", "<C-l>", "$", { noremap = true, silent = true })

-- edit
vim.api.nvim_set_keymap("", "x", '"_x', { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "dd", '"_dd', { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<C-d>", "dd", { noremap = true, silent = true })

-- buffer
vim.api.nvim_set_keymap("", "<Leader>w", ":w<CR>", { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<Leader>[", "<Cmd>BufferPrevious<CR>", { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<Leader>]", "<Cmd>BufferNext<CR>", { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<Leader>d", "<Cmd>BufferClose<CR>", { noremap = true, silent = true })

-- window
vim.api.nvim_set_keymap("n", "<Leader>gh", "<C-w>h", { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<Leader>gj", "<C-w>j", { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<Leader>gk", "<C-w>k", { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<Leader>gl", "<C-w>l", { noremap = true, silent = true })


--- File: /Users/taichi/.config/nvim/lua/config/.DS_Store ---
Non-text file, content not displayed


--- File: /Users/taichi/.config/nvim/lua/config/options.lua ---

-- Basic Settings

-- Set file encoding to UTF-8
vim.opt.encoding = 'utf-8'

-- Display line numbers
vim.opt.number = true

-- Highlight the current line
vim.opt.cursorline = true

-- Highlight the current column
vim.opt.cursorcolumn = true


-- Indentation and Tab Settings

-- Set tab width to 2 spaces
vim.opt.tabstop = 2

-- Set soft tab width to 2 spaces in insert mode
vim.opt.softtabstop = 2

-- Set shift width for auto-indentation to 2 spaces
vim.opt.shiftwidth = 2

-- Convert tabs to spaces
vim.opt.expandtab = true

-- Enable auto-indentation
vim.opt.autoindent = true

-- Enable smart indentation
vim.opt.smartindent = true


-- Display Settings

-- Show command in the status line while typing
vim.opt.showcmd = true

-- Highlight search results
vim.opt.hlsearch = true

-- Always display the status line
vim.opt.laststatus = 2


-- File Handling Settings


... (file truncated, showing first 50 lines)


--- File: /Users/taichi/.config/nvim/lua/config/lazy.lua ---

-- Bootstrap lazy.nvim
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not (vim.uv or vim.loop).fs_stat(lazypath) then
  local lazyrepo = "https://github.com/folke/lazy.nvim.git"
  local out = vim.fn.system({ "git", "clone", "--filter=blob:none", "--branch=stable", lazyrepo, lazypath })
  if vim.v.shell_error ~= 0 then
    vim.api.nvim_echo({
      { "Failed to clone lazy.nvim:\n", "ErrorMsg" },
      { out, "WarningMsg" },
      { "\nPress any key to exit..." },
    }, true, {})
    vim.fn.getchar()
    os.exit(1)
  end
end
vim.opt.rtp:prepend(lazypath)

-- Make sure to setup `mapleader` and `maplocalleader` before
-- loading lazy.nvim so that mappings are correct.
-- This is also a good place to setup other settings (vim.opt)
vim.g.mapleader = " "
vim.g.maplocalleader = "\\"

-- Setup lazy.nvim
require("lazy").setup({
  spec = {
    -- import your plugins
    { import = "plugins" },
  },
  -- Configure any other settings here. See the documentation for more details.
  -- colorscheme that will be used when installing plugins.
  install = { colorscheme = { "habamax" } },
  -- automatically check for plugin updates
  checker = { enabled = true },
})

--- File: /Users/taichi/.config/nvim/lua/plugins/dashboard.lua ---

return {
  'nvimdev/dashboard-nvim',
  event = 'VimEnter',
  config = function()
    --  local logo = [[
    -- ██╗████████╗ ██████╗ ██╗   ██╗    ████████╗ █████╗ ██╗ ██████╗██╗  ██╗██╗
    -- ██║╚══██╔══╝██╔═══██╗██║   ██║    ╚══██╔══╝██╔══██╗██║██╔════╝██║  ██║██║
    -- ██║   ██║   ██║   ██║██║   ██║       ██║   ███████║██║██║     ███████║██║
    -- ██║   ██║   ██║   ██║██║   ██║       ██║   ██╔══██║██║██║     ██╔══██║██║
    -- ██║   ██║   ╚██████╔╝╚██████╔╝       ██║   ██║  ██║██║╚██████╗██║  ██║██║
    -- ╚═╝   ╚═╝    ╚═════╝  ╚═════╝        ╚═╝   ╚═╝  ╚═╝╚═╝ ╚═════╝╚═╝  ╚═╝╚═╝
    --  ]]

    require('dashboard').setup {
      theme = 'hyper',
      config = {
        -- header = vim.split(logo, "\n"),  -- Display the logo
        week_header = {
          enable=true  --boolean use a week header
        },
        shortcut = {
          { desc = '󰊳 Update', group = '@property', action = 'Lazy update', key = 'u' },
          {
            icon = ' ',
            icon_hl = '@variable',
            desc = 'Files',
            group = 'Label',
            action = 'Telescope find_files',
            key = 'f',
          },
        },
      }
    }
  end,
  dependencies = { {'nvim-tree/nvim-web-devicons'} }
}


--- File: /Users/taichi/.config/nvim/lua/plugins/git.lua ---

return {
  {
    "lewis6991/gitsigns.nvim",
    config = function()
      require('gitsigns').setup {
        signs = {
          add          = { text = '┃' },
          change       = { text = '┃' },
          delete       = { text = '_' },
          topdelete    = { text = '‾' },
          changedelete = { text = '~' },
          untracked    = { text = '┆' },
        },
        signs_staged = {
          add          = { text = '┃' },
          change       = { text = '┃' },
          delete       = { text = '_' },
          topdelete    = { text = '‾' },
          changedelete = { text = '~' },
          untracked    = { text = '┆' },
        },
        signs_staged_enable = true,
        signcolumn = true,  -- Toggle with `:Gitsigns toggle_signs`
        numhl      = false, -- Toggle with `:Gitsigns toggle_numhl`
        linehl     = false, -- Toggle with `:Gitsigns toggle_linehl`
        word_diff  = false, -- Toggle with `:Gitsigns toggle_word_diff`
        watch_gitdir = {
          follow_files = true
        },
        auto_attach = true,
        attach_to_untracked = false,
        current_line_blame = false, -- Toggle with `:Gitsigns toggle_current_line_blame`
        current_line_blame_opts = {
          virt_text = true,
          virt_text_pos = 'eol', -- 'eol' | 'overlay' | 'right_align'
          delay = 1000,
          ignore_whitespace = false,
          virt_text_priority = 100,
        },
        current_line_blame_formatter = '<author>, <author_time:%R> - <summary>',
        sign_priority = 6,
        update_debounce = 100,
        status_formatter = nil, -- Use default
        max_file_length = 40000, -- Disable if file is longer than this (in lines)
        preview_config = {
          -- Options passed to nvim_open_win
          border = 'single',
          style = 'minimal',
          relative = 'cursor',
          row = 0,

... (file truncated, showing first 50 lines)


--- File: /Users/taichi/.config/nvim/lua/plugins/telescope.lua ---

return {
    'nvim-telescope/telescope.nvim',
    tag = '0.1.8',
    dependencies = { 'nvim-lua/plenary.nvim' },
    config = function()
        local opts = { noremap = true, silent = true }

        -- Find files including hidden ones
        vim.api.nvim_set_keymap('n', '<Leader>ff', ':Telescope find_files hidden=true<cr>', opts)

        -- List open buffers
        vim.api.nvim_set_keymap('n', '<Leader>fb', ':Telescope buffers<cr>', opts)
    end
}


--- File: /Users/taichi/.config/nvim/lua/plugins/copilot.lua ---

return {
  {
    "github/copilot.vim",
    lazy = false,
    config = function()
      -- vim.g.copilot_no_tab_map = true
      vim.g.copilot_filetypes = { yaml = true }
      local keymap = vim.keymap.set
      -- https://github.com/orgs/community/discussions/29817#discussioncomment-4217615
      -- keymap("i", "<C-g>", 'copilot#Accept("<CR>")',
      vim.keymap.set('i', '<C-J>', 'copilot#Accept("\\<CR>")', {
        expr = true,
        replace_keycodes = false
      })
      vim.g.copilot_no_tab_map = true     --   { silent = true, expr = true, script = true, replace_keycodes = false })
      keymap("i", "<C-j>", "<Plug>(copilot-next)")
      keymap("i", "<C-k>", "<Plug>(copilot-previous)")
      keymap("i", "<C-o>", "<Plug>(copilot-dismiss)")
      keymap("i", "<C-s>", "<Plug>(copilot-suggest)")
      keymap('i', '<C-L>', '<Plug>(copilot-accept-word)')
    end
  },
  {
    "CopilotC-Nvim/CopilotChat.nvim",
    branch = "canary",
    cmd = "CopilotChat",
    event = "VeryLazy",
    opts = function()
      local user = vim.env.USER or "User"
      user = user:sub(1, 1):upper() .. user:sub(2)
      return {
        model = "gpt-4o",  -- Set model to gpt-4o
        auto_insert_mode = true,
        show_help = true,
        question_header = "  " .. user .. " ",
        answer_header = "  Copilot ",
        window = {
          layout = 'float',
          width = 0.8,
          height = 0.8,
        },
        selection = function(source)
          local select = require("CopilotChat.select")
          return select.visual(source) or select.buffer(source)
        end,
      }
    end,
    keys = {
      { "<c-s>", "<CR>", ft = "copilot-chat", desc = "Submit Prompt", remap = true },
      { "<leader>cc", "", desc = "+ai", mode = { "n", "v" } },

... (file truncated, showing first 50 lines)


--- File: /Users/taichi/.config/nvim/lua/plugins/lualine.lua ---

return{
    {
        "nvim-lualine/lualine.nvim",
        event = "VeryLazy",
        opts = function()
          return {
            --[[add your custom lualine config here]]
          }
        end,
      }
}

--- File: /Users/taichi/.config/nvim/lua/plugins/lsp.lua ---

return {
  {
    "williamboman/mason.nvim",
    build = ":MasonUpdate",
    config = function()
      require("mason").setup()
    end
  },
  {
    "williamboman/mason-lspconfig.nvim",
    dependencies = {
      "williamboman/mason.nvim",
      "neovim/nvim-lspconfig",
    },
    config = function()
      local lspconfig = require("lspconfig")
      require("mason-lspconfig").setup_handlers({
        function(server_name)
          lspconfig[server_name].setup({})
        end,
      })

      vim.api.nvim_create_autocmd("LspAttach", {
        callback = function()
          local opts = { noremap = true, silent = true }
          vim.keymap.set('n', 'gk', '<cmd>lua vim.lsp.buf.hover()<CR>')
          vim.keymap.set('n', 'gd', vim.lsp.buf.definition, opts)
          vim.keymap.set('n', 'gk', '<cmd>lua vim.lsp.buf.hover()<CR>')
          vim.keymap.set('n', 'gf', '<cmd>lua vim.lsp.buf.format()<CR>')
          vim.keymap.set('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>')
          vim.keymap.set('n', 'ga', '<cmd>lua vim.lsp.buf.code_action()<CR>')
        end
      })
    end
  },
  {
    "hrsh7th/nvim-cmp",
    dependencies = {
      "hrsh7th/cmp-nvim-lsp",
      "hrsh7th/cmp-buffer",
    },
    config = function()
      local cmp = require("cmp")
      local has_words_before = function()
        unpack = unpack or table.unpack
        local line, col = unpack(vim.api.nvim_win_get_cursor(0))
        return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
      end

      cmp.setup({

... (file truncated, showing first 50 lines)


--- File: /Users/taichi/.config/nvim/lua/plugins/colorscheme.lua ---

return {
    -- the colorscheme should be available when starting Neovim
    {
      "folke/tokyonight.nvim",
      lazy = false, -- make sure we load this during startup if it is your main colorscheme
      priority = 1000, -- make sure to load this before all the other start plugins
      config = function()
        -- load the colorscheme here
        vim.cmd([[colorscheme tokyonight-night]])
      end,
    }
  }


--- File: /Users/taichi/.config/nvim/lua/plugins/buffer.lua ---

return {
  {'romgrk/barbar.nvim',
    dependencies = {
      'lewis6991/gitsigns.nvim', -- OPTIONAL: for git status
      'nvim-tree/nvim-web-devicons', -- OPTIONAL: for file icons
    },
    init = function() vim.g.barbar_auto_setup = false end,
    opts = {
      -- lazy.nvim will automatically call setup for you. put your options here, anything missing will use the default:
      -- animation = true,
      -- insert_at_start = true,
      -- …etc.
    },
    version = '^1.0.0', -- optional: only update when a new 1.x version is released
  }
}


--- File: /Users/taichi/.config/nvim/lua/plugins/mini.lua ---

return {
  {
    "echasnovski/mini.pairs",
    config = function(_, opts)
      require('mini.pairs').setup(opts)
    end,
  },
  {
    "echasnovski/mini.files",
    opts = {
      windows = {
        preview = true,
      },
      mappings = {
        go_in_plus = "l",
        go_in = "L",
        close = "q",  -- 追加: qでウィンドウを閉じる
      },
      options = {
        follow_current_file = true,
      },
      content = {
        filter = function(file)
          -- Function to check if a value exists in a table
          local function table_contains(table, value)
            for _, v in ipairs(table) do
              if v == value then
                return true
              end
            end
            return false
          end

          -- Files to ignore
          local ignored_files = {
            ".DS_Store",
          }

          -- Split the file path
          local t = vim.fn.split(file.path, "/")
          local file_name = t[#t]

          -- Return true if the file is not in the ignored list
          return not table_contains(ignored_files, file_name)
        end,
      },
    },
    config = function(_, opts)
      require('mini.files').setup(opts)


... (file truncated, showing first 50 lines)


--- File: /Users/taichi/.config/nvim/lua/plugins/utils.lua ---

return {
  "folke/which-key.nvim",
  event = "VeryLazy",
  opts = {
    -- your configuration comes here
    -- or leave it empty to use the default settings
    -- refer to the configuration section below
  },
  keys = {
    {
      "<leader>?",
      function()
        require("which-key").show({ global = false })
      end,
      desc = "Buffer Local Keymaps (which-key)",
    },
  },
  {
    'numToStr/Comment.nvim',
    config = function()
      require('Comment').setup()
    end,
  },
  {
    "folke/noice.nvim",
    event = "VeryLazy",
    opts = {
      -- add any options here
    },
    dependencies = {
      -- if you lazy-load any plugin below, make sure to add proper `module="..."` entries
      "MunifTanjim/nui.nvim",
      -- OPTIONAL:
      --   `nvim-notify` is only needed, if you want to use the notification view.
      --   If not available, we use `mini` as the fallback
      "rcarriga/nvim-notify",
    }
  },
  {
    'Wansmer/treesj',
   keys = { '<space>m', '<space>j', '<space>s' },
    dependencies = { 'nvim-treesitter/nvim-treesitter' }, -- if you install parsers with `nvim-treesitter`
    config = function()
      require('treesj').setup({--[[ your config ]]})
    end,
  },
  {
    "iamcco/markdown-preview.nvim",
    cmd = { "MarkdownPreviewToggle", "MarkdownPreview", "MarkdownPreviewStop" },
    ft = { "markdown" },

... (file truncated, showing first 50 lines)


--- File: /Users/taichi/.config/nvim/lua/plugins/treesitter.lua ---

return {
    "nvim-treesitter/nvim-treesitter",
    build = ":TSUpdate",
    config = function ()
      local configs = require("nvim-treesitter.configs")

      configs.setup({
        ensure_installed = {
            "astro",
            "bash",
            "c",
            "comment",
            "cpp",
            "css",
            "dart",
            "dockerfile",
            "go",
            "gomod",
            "graphql",
            "html",
            "javascript",
            "jsdoc",
            "json",
            "jsonc",
            "lua",
            "make",
            "markdown",
            "php",
            "prisma",
            "python",
            "regex",
            "rust",
            "scss",
            "sparql",
            "sql",
            "toml",
            "tsx",
            "typescript",
            "vim",
            "yaml",
        },
        sync_install = false,
        highlight = { enable = true },
        indent = { enable = true },
        })
    end
}

--- File: /Users/taichi/.config/nvim/lua/plugins/toggleterm.lua ---

return {
  'akinsho/toggleterm.nvim',
  config = function()
    require('toggleterm').setup ({
      start_in_insert = true
    })

    -- Key mappings should be defined outside the setup function
    vim.keymap.set('n', '<Leader>tt', ':ToggleTerm direction=float<cr>')
    vim.keymap.set('t', '<Esc>', '<C-\\><C-n>:ToggleTerm<cr>')
  end
}


--- File: /Users/taichi/.config/nvim/lazy-lock.json ---
Non-text file, content not displayed
